/*
提取Psd文件的原始信息
Psd文件包括三种图层,1:文件夹节点(folder),2:图像图层(Image),3:文本图层(Text)
扩展:可以根据具体项目需求提取图像和文本图层的相关信息
*/
const WARING_TEXT = /^(\\n|\s)|(\\n|\s)$/;

const ST = stringIDToTypeID;
const TS = typeIDToStringID;
const CT = charIDToTypeID;

function Extractor(doc)
{
	this.doc = doc;
}

Extractor.prototype.extract = function(waring)
{
	this.waring = waring;

	var layerCount = this.getLayerCount(this.doc);
	var data = {type:"folder", name:this.doc.name, layerIndex:layerCount, startIndex:layerCount, endIndex:1, parent:null, children:[]};
	var current = data;
	for(var i = layerCount; i >= 1; i--)
	{
		var descriptor = this.getLayerActionDescriptor(i);
		var layerSection = this.getLayerSection(descriptor);
		var node;
		var visible = this.getLayerVisibility(descriptor);
		if(visible == 0)
		{
			this.toggleLayerVisibility(i, true);
		}
		switch(layerSection)
		{
			case "layerSectionStart":
				node = {type:"folder", name:this.getLayerName(descriptor), layerIndex:i, startIndex:i, endIndex:0, parent:current, children:[]};
				current.children.push(node);
				current = node;
				break;
			case "layerSectionContent":
				if(this.isTextLayer(descriptor) == true)
				{
					node = this.generateTextLayerData(descriptor, i);
				}
				else
				{
					node = this.generateImageLayerData(descriptor, i);
				}
				node.parent = current;
				current.children.push(node);
				break;
			case "layerSectionEnd":
				current.endIndex = i;
				current = current.parent;
				break;
		}
	}
	return data;
}

Extractor.prototype.isTextLayer = function(descriptor)
{
	return descriptor.hasKey(ST("textKey"));
}

Extractor.prototype.generateTextLayerData = function(descriptor, layerIndex)
{
	var bounds = this.getTextLayerBounds(descriptor, layerIndex);
	var data = {type:"text", name:this.getLayerName(descriptor), alpha:this.getLayerAlpha(descriptor),
				centerX:bounds[0], centerY:bounds[1], width:bounds[2], height:bounds[3], fragments:this.getTextLayerFragments(descriptor),
				effects:this.getTextLayerEffects(descriptor), layerIndex:layerIndex};
	return data;
}

//增加图片输出设置参数，比如选择，缩放，强制输出
Extractor.prototype.generateImageLayerData = function(descriptor, layerIndex)
{
	var bounds = this.getLayerBounds(descriptor);
	var data = {type:"image", name:this.getLayerName(descriptor), alpha:this.getLayerAlpha(descriptor),
				centerX:bounds[0], centerY:bounds[1], width:bounds[2], height:bounds[3],
				effects:this.getImageLayerEffects(descriptor), layerIndex:layerIndex, assetName:"", exportParam:""};
	return data;
}

Extractor.prototype.getLayerActionDescriptor = function(layerIndex)
{
	var ref = new ActionReference();
	ref.putIndex(ST("layer"), layerIndex);
	return executeActionGet(ref);
}

Extractor.prototype.getLayerSection = function(descriptor)
{
	return TS(descriptor.getEnumerationValue(ST("layerSection")));
}

Extractor.prototype.getLayerName = function(descriptor)
{
	return descriptor.getString(ST("name"));
}

Extractor.prototype.getLayerAlpha = function(descriptor)
{
	return descriptor.getUnitDoubleValue(ST("opacity")) / 255;
}

Extractor.prototype.getLayerVisibility = function(descriptor)
{
	return descriptor.getInteger(ST("visible"));
}

//文本图层返回的是实际像素的区域，比文本框范围略小
Extractor.prototype.getTextLayerBounds = function(descriptor, layerIndex)
{
	var hasEffects = this.hasLayerEffects(descriptor);
	if(hasEffects == true)
	{
		this.selectLayer(layerIndex);
		this.toggleLayerEffects(layerIndex, false);//临时关闭文本图层特效以获得精确的文本框尺寸值
		descriptor = this.getLayerActionDescriptor(layerIndex);
	}
	var bounds = this.getLayerBounds(descriptor);
	if(hasEffects == true)
	{
		this.toggleLayerEffects(layerIndex, true);	
	}
	return bounds;
}

Extractor.prototype.getLayerBounds = function(descriptor)
{
	var bounds = descriptor.getObjectValue(ST("bounds"));
	var left = bounds.getUnitDoubleValue(ST("left"));
	var top = bounds.getUnitDoubleValue(ST("top"));
	var right = bounds.getUnitDoubleValue(ST("right"));
	var bottom = bounds.getUnitDoubleValue(ST("bottom"));	
	var width = right - left;
	var height = bottom - top;
	var centerX = left + (right - left) * 0.5;
	var centerY = top + (bottom - top) * 0.5;
	return [centerX, centerY, width, height];
}

Extractor.prototype.getTextLayerFragments = function(descriptor)
{
	var fragments = [];
	var textKey = descriptor.getObjectValue(ST("textKey"));
	var content = textKey.getString(ST("textKey"));
	var styleRangleList = textKey.getList(ST("textStyleRange"));
	var factor = 1;
	//文本缩放系数,Ps版本cs6(Version number 13)以上需要应用该系数
	if(app.version.match(/^\d+/) >= 13 && textKey.hasKey(ST("transform")) == true)
	{
		factor = textKey.getObjectValue(ST("transform")).getUnitDoubleValue(ST("yy"));
	}
	var set = {};//发现Psd中文本存在换行的时候，解析的时候容易出现重复的文本片段
	var full_text = "";
	for(var i = 0; i < styleRangleList.count; i++)
	{
		var styleRange = styleRangleList.getObjectValue(i);
		var start = styleRange.getInteger(ST("from"));
		var end = styleRange.getInteger(ST("to"));
		if(set[start + "_" + end] != 1)
		{
			set[start + "_" + end] = 1;
			var style = styleRange.getObjectValue(ST("textStyle"));
			var text = content.substring(start, end).replace(/\r/g, "\\n");
			var font = style.getString(ST("fontName")).replace(/ /g, "");
			var size = style.getUnitDoubleValue(ST("size"));
			var color = style.getObjectValue(ST("color"));	
			var fontStyle = style.getString(ST("fontStyleName"));
			full_text = full_text + text;
			fragments.push({text:text, font:font, size:Math.round(size * factor), fontStyle:fontStyle, color:this.getColorHexValue(color)});	
		}
	}
	if(full_text.match(WARING_TEXT))
	{
		this.waring.push(full_text);
	}
	return fragments;
}

Extractor.prototype.getTextLayerEffects = function(descriptor)
{
	var effects = [];
	if(this.hasLayerEffect(descriptor, "frameFX") == true)
	{
		effects.push(this.getTextLayerStrokeEffect(descriptor));
	}
	if(this.hasLayerEffect(descriptor, "dropShadow") == true)
	{
		effects.push(this.getTextLayerDropShadowEffect(descriptor));
	}
	if(this.hasLayerEffect(descriptor, "gradientFill") == true)
	{
		effects.push(this.getTextLayerGradientOverlayEffect(descriptor));
	}
	return effects;
}

Extractor.prototype.hasLayerEffect = function(descriptor, effectName)
{
	var hasLayerEffects = this.hasLayerEffects(descriptor);
	if(hasLayerEffects == false) return false;
	
	var layerEffects = descriptor.getObjectValue(ST("layerEffects"));
	var hasEffect = layerEffects.hasKey(ST(effectName));
	if(hasEffect == false) return false;

	var effectEnabled = layerEffects.getObjectValue(ST(effectName)).getBoolean(ST("enabled"));
	if(effectEnabled == false) return false;

	return true;
}

Extractor.prototype.hasLayerEffects = function(descriptor)
{
	return descriptor.hasKey(ST("layerEffects")) && descriptor.getBoolean(ST("layerFXVisible"));
}

Extractor.prototype.getTextLayerStrokeEffect = function(descriptor)
{
	var stroke = descriptor.getObjectValue(ST("layerEffects")).getObjectValue(ST("frameFX"));
	var size = stroke.getUnitDoubleValue(ST("size"));
	var alpha = stroke.getUnitDoubleValue(ST("opacity"));
	var color = stroke.getObjectValue(ST("color"));
	return {type:"stroke", size:size, color:this.getColorHexValue(color), alpha:alpha};
}

Extractor.prototype.getTextLayerDropShadowEffect = function(descriptor)
{
	var dropShadow = descriptor.getObjectValue(ST("layerEffects")).getObjectValue(ST("dropShadow"));
	var alpha = dropShadow.getUnitDoubleValue(ST("opacity"));
	var angle = dropShadow.getInteger(ST("localLightingAngle"));
	var distance = dropShadow.getInteger(ST("distance"));
	var color = dropShadow.getObjectValue(ST("color"));
	return {type:"dropShadow", color:this.getColorHexValue(color), alpha:alpha, angle:angle, distance:distance};
}

Extractor.prototype.getTextLayerGradientOverlayEffect = function(descriptor)
{
	var gradientOverlay = descriptor.getObjectValue(ST("layerEffects")).getObjectValue(CT("GrFl")); // gradient overlay
	var gradient = gradientOverlay.getObjectValue(CT("Grad"));	// gradient
	var gradientColors = gradient.getList(CT("Clrs"));

	var outColors = [];
	var outPrecents = [];

	for(var i = 0; i < gradientColors.count; i++)
	{
		var stops = gradientColors.getObjectValue(i);

		var location = stops.getInteger(CT("Lctn"));
		if (i == 0 && location != 0)
		{
			outColors.push(this.getColorHexValue(stops.getObjectValue(CT("Clr "))));
			outPrecents.push(0);
		}

		outColors.push(this.getColorHexValue(stops.getObjectValue(CT("Clr "))));
		outPrecents.push(location / 4096);
		
		if (i == gradientColors.count - 1 && location != 4096)
		{
			outColors.push(this.getColorHexValue(stops.getObjectValue(CT("Clr "))));
			outPrecents.push(1);
		}
	}
	return {type:"gradient", colors:outColors, precents:outPrecents};
}

Extractor.prototype.getImageLayerEffects = function(descriptor)
{
	var effects = [];
	if(this.hasLayerEffect(descriptor, "solidFill") == true)
	{
		effects.push(this.getImageLayerSolidFillEffect(descriptor));
	}
	return effects;
}

Extractor.prototype.getImageLayerSolidFillEffect = function(descriptor)
{
	var solidFill = descriptor.getObjectValue(ST("layerEffects")).getObjectValue(ST("solidFill"));
	var alpha = solidFill.getUnitDoubleValue(ST("opacity"));
	var mode = "notSupport";
	var src_mode = solidFill.getEnumerationValue(ST("mode"))
	if(src_mode == ST("normal"))
	{
		mode = "normal";
	}
	else if(src_mode == ST("multiply"))
	{
		mode = "multiply"
	}
	var color = solidFill.getObjectValue(ST("color"));
	return {type:"solidFill", mode:mode, color:this.getColorHexValue(color), alpha:alpha};
}

Extractor.prototype.getLayerCount = function()
{
	var ref = new ActionReference();
	ref.putEnumerated(ST("document"), ST("ordinal"), ST("targetEnum"));
	var desc = executeActionGet(ref);
	var count = desc.getInteger(ST("numberOfLayers"));
	return count;
}

Extractor.prototype.toggleLayerEffects = function(layerIndex, isOn)
{
	var descriptor = new ActionDescriptor();
	var list = new ActionList();
	var reference = new ActionReference();
	reference.putClass(ST("layerEffects"));
	reference.putEnumerated(ST("layer"), ST("ordinal"), ST("targetEnum"));
	list.putReference(reference);
	descriptor.putList(ST("null"), list);
	executeAction(isOn ? ST("show") : ST("hide"), descriptor, DialogModes.NO);
}

Extractor.prototype.toggleLayerVisibility = function(layerIndex, isOn)
{
	var descriptor = new ActionDescriptor();
	var reference = new ActionReference();
	reference.putIndex(ST("layer"), layerIndex);
	descriptor.putReference(ST("null"), reference);
	executeAction(isOn ? ST("show") : ST("hide"), descriptor, DialogModes.NO);
}

Extractor.prototype.selectLayer = function(layerIndex)
{
	var descriptor = new ActionDescriptor();
	var reference = new ActionReference();
	reference.putIndex(ST("layer"), layerIndex);
	descriptor.putReference(ST("null"), reference);
	executeAction(ST("select"), descriptor, DialogModes.NO);
}

Extractor.prototype.getColorHexValue = function(color)
{
	var solidColor = new SolidColor();
	solidColor.rgb.red = color.getInteger(ST("red"));
	solidColor.rgb.green = color.getInteger(ST("green"));
	solidColor.rgb.blue = color.getInteger(ST("blue"));
	return solidColor.rgb.hexValue;
}
